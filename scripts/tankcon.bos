//linear constant 65536

#include "constants.h"

piece  base, nano, nano1, nano2, guns, doors, turret, shovel, flare1, flare2;

static-var  Static_Var_1, spray, gun_1;

lua_QueryNanoPiece() 
{
  return 0;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	Static_Var_1 = 0;
	start-script SmokeUnit();
	gun_1 = base;
}

StartBuilding(Func_Var_1)
{
	set INBUILDSTANCE to 1;
	turn doors to x-axis <-100> speed <201.978022>;
	move nano to z-axis [3] speed [12.312305];
}

StopBuilding()
{
	move nano to z-axis [0] speed [6.312305];
	turn doors to x-axis <0> speed <101.978022>;
}

QueryNanoPiece(piecenum)
{
	if( spray == 0 )
	{
		piecenum = nano1;
	}
	if( spray != 0 )
	{
		piecenum = nano2;
	}
	spray = !spray;
	call-script lua_QueryNanoPiece(piecenum);
}

TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

AimPrimary(heading, pitch)
{
	turn turret to y-axis heading speed <450.000000>;
	turn guns to x-axis <0.000000> - pitch speed <150.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn guns around x-axis;
	return (1);
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	if( gun_1 )
	{
		piecenum = flare1;
	}
	else
	{
		piecenum = flare2;
	}
	return (1);
}

FirePrimary() {
	gun_1 = !gun_1;
	if( gun_1 )
	{
		emit-sfx 1024 from  flare1;
	}
	else
	{
		emit-sfx 1024 from  flare2;
	}
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP3;
		explode guns type BITMAPONLY | BITMAP4;
		return 1;
	}
	if( severity <= 50 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type SHATTER | BITMAP3;
		explode guns type SHATTER | BITMAP4;
		return 1;
	}
	if( severity <= 99 )
	{
		corpsetype = 2;
		explode base type SHATTER | BITMAP1;
		explode turret type FALL | SMOKE | FIRE | BITMAP3;
		explode guns type SHATTER | BITMAP4;
		return 2;
	}
	corpsetype = 2;
	explode base type SHATTER | BITMAP1;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode guns type SHATTER | BITMAP4;
	return 2;
}
